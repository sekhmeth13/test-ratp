{
  "{\"sourceRoot\":\"/home/faust/Projects/test-ratp/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/faust/Projects/test-ratp\",\"filename\":\"/home/faust/Projects/test-ratp/src/index.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/faust/Projects/test-ratp\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.12.9": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/faust/Projects/test-ratp/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/faust/Projects/test-ratp",
      "filename": "/home/faust/Projects/test-ratp/src/index.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/faust/Projects/test-ratp",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "BigIntLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "StaticBlock": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/faust/Projects/test-ratp/src/index.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/home/faust/Projects/test-ratp/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/faust/Projects/test-ratp/src/",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar YAML = require('yamljs');\n\nvar app = (0, _express[\"default\"])();\n\nvar swaggerUi = require('swagger-ui-express');\n\nvar swaggerDocument = YAML.load(\"\".concat(__dirname, \"/swagger.yaml\"));\nvar port = 8000;\nvar distantApiUrl = \"https://data.ratp.fr/api/records/1.0/search/?dataset=positions-geographiques-des-stations-du-reseau-ratp&facet=stop_name\";\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument, {\n  explorer: true\n}));\napp.get('/:name', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {\n    var stationName, _req$query, size, page, params, _yield$axios, data, records, uniqueFields;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            stationName = req.params.name;\n            _req$query = req.query, size = _req$query.size, page = _req$query.page;\n            params = {\n              q: stationName\n            };\n\n            if (size) {\n              params.rows = size;\n            }\n\n            if (page) {\n              params.start = size * (page - 1);\n            }\n\n            _context.prev = 5;\n            _context.next = 8;\n            return (0, _axios[\"default\"])({\n              url: distantApiUrl,\n              headers: {\n                Accept: 'application/json'\n              },\n              params: params\n            });\n\n          case 8:\n            _yield$axios = _context.sent;\n            data = _yield$axios.data;\n            records = [];\n            uniqueFields = [];\n            data.records.forEach(function (station) {\n              var recordid = station.recordid,\n                  fields = station.fields;\n              var recordToInsert = {\n                gpsCoordinates: fields.stop_coordinates,\n                name: fields.stop_name,\n                description: fields.stop_desc,\n                internalId: fields.stop_id\n              };\n\n              if (records.find(function (record) {\n                record.name == fields.stop_name && record.description == fields.stop_description && record.gpsCoordinates == fields.stop_coordinates;\n              })) {\n                recordToInsert.duplicated = true;\n              }\n\n              records.push(recordToInsert);\n            });\n            res.send(JSON.stringify(records), 200);\n            _context.next = 19;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](5);\n            console.error(_context.t0);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 16]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\napp.listen(port, function () {\n  console.log(\"The application is running @ http://localhost:\".concat(port));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIllBTUwiLCJyZXF1aXJlIiwiYXBwIiwic3dhZ2dlclVpIiwic3dhZ2dlckRvY3VtZW50IiwibG9hZCIsIl9fZGlybmFtZSIsInBvcnQiLCJkaXN0YW50QXBpVXJsIiwidXNlIiwic2VydmUiLCJzZXR1cCIsImV4cGxvcmVyIiwiZ2V0IiwicmVxIiwicmVzIiwic3RhdGlvbk5hbWUiLCJwYXJhbXMiLCJuYW1lIiwicXVlcnkiLCJzaXplIiwicGFnZSIsInEiLCJyb3dzIiwic3RhcnQiLCJ1cmwiLCJoZWFkZXJzIiwiQWNjZXB0IiwiZGF0YSIsInJlY29yZHMiLCJ1bmlxdWVGaWVsZHMiLCJmb3JFYWNoIiwic3RhdGlvbiIsInJlY29yZGlkIiwiZmllbGRzIiwicmVjb3JkVG9JbnNlcnQiLCJncHNDb29yZGluYXRlcyIsInN0b3BfY29vcmRpbmF0ZXMiLCJzdG9wX25hbWUiLCJkZXNjcmlwdGlvbiIsInN0b3BfZGVzYyIsImludGVybmFsSWQiLCJzdG9wX2lkIiwiZmluZCIsInJlY29yZCIsInN0b3BfZGVzY3JpcHRpb24iLCJkdXBsaWNhdGVkIiwicHVzaCIsInNlbmQiLCJKU09OIiwic3RyaW5naWZ5IiwiY29uc29sZSIsImVycm9yIiwibGlzdGVuIiwibG9nIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOzs7Ozs7OztBQUNBLElBQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBRUEsSUFBTUMsR0FBRyxHQUFHLDBCQUFaOztBQUNBLElBQU1DLFNBQVMsR0FBR0YsT0FBTyxDQUFDLG9CQUFELENBQXpCOztBQUNBLElBQU1HLGVBQWUsR0FBR0osSUFBSSxDQUFDSyxJQUFMLFdBQWFDLFNBQWIsbUJBQXhCO0FBRUEsSUFBTUMsSUFBSSxHQUFHLElBQWI7QUFDQSxJQUFNQyxhQUFhLEdBQUcsMEhBQXRCO0FBR0FOLEdBQUcsQ0FBQ08sR0FBSixDQUFRLFdBQVIsRUFBcUJOLFNBQVMsQ0FBQ08sS0FB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InNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gXCJleHByZXNzXCJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIlxuY29uc3QgWUFNTCA9IHJlcXVpcmUoJ3lhbWxqcycpO1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5jb25zdCBzd2FnZ2VyVWkgPSByZXF1aXJlKCdzd2FnZ2VyLXVpLWV4cHJlc3MnKTtcbmNvbnN0IHN3YWdnZXJEb2N1bWVudCA9IFlBTUwubG9hZChgJHtfX2Rpcm5hbWV9L3N3YWdnZXIueWFtbGApO1xuXG5jb25zdCBwb3J0ID0gODAwMFxuY29uc3QgZGlzdGFudEFwaVVybCA9IFwiaHR0cHM6Ly9kYXRhLnJhdHAuZnIvYXBpL3JlY29yZHMvMS4wL3NlYXJjaC8/ZGF0YXNldD1wb3NpdGlvbnMtZ2VvZ3JhcGhpcXVlcy1kZXMtc3RhdGlvbnMtZHUtcmVzZWF1LXJhdHAmZmFjZXQ9c3RvcF9uYW1lXCJcblxuIFxuYXBwLnVzZSgnL2FwaS1kb2NzJywgc3dhZ2dlclVpLnNlcnZlLCBzd2FnZ2VyVWkuc2V0dXAoc3dhZ2dlckRvY3VtZW50LCB7ZXhwbG9yZXI6IHRydWV9KSk7XG5cbmFwcC5nZXQoJy86bmFtZScsIGFzeW5jIGZ1bmN0aW9uKHJlcSwgcmVzKSB7XG4gICAgY29uc3Qgc3RhdGlvbk5hbWUgPSByZXEucGFyYW1zLm5hbWU7XG4gICAgbGV0IHtzaXplLCBwYWdlfSA9IHJlcS5xdWVyeVxuXG4gICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICBxOiBzdGF0aW9uTmFtZSxcbiAgICB9XG5cbiAgICBpZihzaXplKXtcbiAgICAgICAgcGFyYW1zLnJvd3MgPSBzaXplXG4gICAgfVxuICAgIGlmKHBhZ2Upe1xuICAgICAgICBwYXJhbXMuc3RhcnQgPSAoc2l6ZSAqIChwYWdlLTEpKVxuICAgIH1cbiAgICBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qge2RhdGF9ID0gYXdhaXQgYXhpb3Moe1xuICAgICAgICAgICAgdXJsOiBkaXN0YW50QXBpVXJsLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXJhbXNcbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgICAgICBjb25zdCByZWNvcmRzID0gW11cbiAgICAgICAgY29uc3QgdW5pcXVlRmllbGRzID0gW11cbiAgICAgICAgZGF0YS5yZWNvcmRzLmZvckVhY2goc3RhdGlvbiA9PiB7XG4gICAgICAgICAgICBjb25zdCB7cmVjb3JkaWQsIGZpZWxkc30gPSBzdGF0aW9uXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZFRvSW5zZXJ0ID0ge1xuICAgICAgICAgICAgICAgIGdwc0Nvb3JkaW5hdGVzOiBmaWVsZHMuc3RvcF9jb29yZGluYXRlcyxcbiAgICAgICAgICAgICAgICBuYW1lOiBmaWVsZHMuc3RvcF9uYW1lLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBmaWVsZHMuc3RvcF9kZXNjLFxuICAgICAgICAgICAgICAgIGludGVybmFsSWQ6IGZpZWxkcy5zdG9wX2lkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihyZWNvcmRzLmZpbmQocmVjb3JkID0+IHtcbiAgICAgICAgICAgICAgICByZWNvcmQubmFtZSA9PSBmaWVsZHMuc3RvcF9uYW1lICYmIHJlY29yZC5kZXNjcmlwdGlvbiA9PSBmaWVsZHMuc3RvcF9kZXNjcmlwdGlvbiAmJiByZWNvcmQuZ3BzQ29vcmRpbmF0ZXMgPT0gZmllbGRzLnN0b3BfY29vcmRpbmF0ZXNcbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkVG9JbnNlcnQuZHVwbGljYXRlZCA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlY29yZHMucHVzaChyZWNvcmRUb0luc2VydClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVzLnNlbmQoSlNPTi5zdHJpbmdpZnkocmVjb3JkcyksIDIwMClcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9XG4gICAgXG59KTtcblxuXG5hcHAubGlzdGVuKHBvcnQsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgVGhlIGFwcGxpY2F0aW9uIGlzIHJ1bm5pbmcgQCBodHRwOi8vbG9jYWxob3N0OiR7cG9ydH1gKVxuICB9KVxuICAiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "YAML",
        "require",
        "app",
        "swaggerUi",
        "swaggerDocument",
        "load",
        "__dirname",
        "port",
        "distantApiUrl",
        "use",
        "serve",
        "setup",
        "explorer",
        "get",
        "req",
        "res",
        "stationName",
        "params",
        "name",
        "query",
        "size",
        "page",
        "q",
        "rows",
        "start",
        "url",
        "headers",
        "Accept",
        "data",
        "records",
        "uniqueFields",
        "forEach",
        "station",
        "recordid",
        "fields",
        "recordToInsert",
        "gpsCoordinates",
        "stop_coordinates",
        "stop_name",
        "description",
        "stop_desc",
        "internalId",
        "stop_id",
        "find",
        "record",
        "stop_description",
        "duplicated",
        "push",
        "send",
        "JSON",
        "stringify",
        "console",
        "error",
        "listen",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/home/faust/Projects/test-ratp/src/",
      "sourcesContent": [
        "import express from \"express\"\nimport axios from \"axios\"\nconst YAML = require('yamljs');\n\nconst app = express();\nconst swaggerUi = require('swagger-ui-express');\nconst swaggerDocument = YAML.load(`${__dirname}/swagger.yaml`);\n\nconst port = 8000\nconst distantApiUrl = \"https://data.ratp.fr/api/records/1.0/search/?dataset=positions-geographiques-des-stations-du-reseau-ratp&facet=stop_name\"\n\n \napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument, {explorer: true}));\n\napp.get('/:name', async function(req, res) {\n    const stationName = req.params.name;\n    let {size, page} = req.query\n\n    const params = {\n        q: stationName,\n    }\n\n    if(size){\n        params.rows = size\n    }\n    if(page){\n        params.start = (size * (page-1))\n    }\n    \n        try {\n        const {data} = await axios({\n            url: distantApiUrl,\n            headers: {\n                Accept: 'application/json'\n              },\n            params\n            \n        })\n        const records = []\n        const uniqueFields = []\n        data.records.forEach(station => {\n            const {recordid, fields} = station\n            \n            const recordToInsert = {\n                gpsCoordinates: fields.stop_coordinates,\n                name: fields.stop_name,\n                description: fields.stop_desc,\n                internalId: fields.stop_id\n            }\n            if(records.find(record => {\n                record.name == fields.stop_name && record.description == fields.stop_description && record.gpsCoordinates == fields.stop_coordinates\n            })) {\n                recordToInsert.duplicated = true\n            }\n            records.push(recordToInsert)\n        });\n\n        res.send(JSON.stringify(records), 200)\n    } catch (error) {\n        console.error(error);\n    }\n    \n});\n\n\napp.listen(port, () => {\n    console.log(`The application is running @ http://localhost:${port}`)\n  })\n  "
      ]
    },
    "sourceType": "script",
    "mtime": 1606406061928
  }
}